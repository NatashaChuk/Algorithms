Exercises

1. What is time complexity and what is its relation to algorithms?
	A:  A function that estimates the runtime of an algorithm.


2. What is runtime?
	A: Runtime is the same as time complexity but may also refer to the 
	   physical time duration of an algorithm. 


3. How is the runtime of an algorithm calculated?
	A: The runtime of an algorithm is calculated using Big O function 	   notation, O(f(n)). You would add up how many instructions the 	   algorithm will execute as a function of the size of its input, 	   then simplify the expression to the largest term and drop any 	   constants. 


4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.
	A:	Constant Growth Rate 
		Logrithmic Growth Rate
		Linear Growth Rate
		Log Linear Rate
		Quadratic Growth Rate
		Cubic Growth Rate
		Exponential Growth Rate


5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.
A:  An example of linear growth would be driving a car at a certain          speed. As long as you maintain that speed you should travel the same distance within a certain period of time. 


6.  Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

	FUNCTION linearSearch(array, target)
	  FOR each number in the array
  	   IF number = target THEN
    	     RETURN true
   	   END IF
 	  END FOR
 	  RETURN false
	END FUNCTION


	A: O(n)



7.   Determine the time complexity of the following snippet of code.	
	If you get stuck, read through the graphical representation section again.

	FUNCTION foo(array)
	 FOR each number in the array
	   FOR each number in the array
	     print "Hello"
	   END FOR
	 END FOR
	END FUNCTION


	A: O(n^2)



8.  Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

	FUNCTION fibonacci(number)
	 IF number < 1 THEN
	   ERROR
	 ELSE IF number = 1 or 2 THEN
	   RETURN 1
	 ELSE
	   CALL fibonacci WITH number - 2 RETURNING twoBack
	   CALL fibonacci WITH number - 1 RETURNING oneBack
	   RETURN twoBack + oneBack
	 END IF
	END FUNCTION


	A: O(2^n) 


9.  Out of the code snippets you just saw, which is the most time efficient?

	A: #6 is most efficient


